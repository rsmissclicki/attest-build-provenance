#include <iostream>
#include <string>
#include <curl/curl.h>

// Function to handle the API response
size_t WriteCallback(void* contents, size_t size, size_t nmemb, std::string* userData) {
    size_t totalSize = size * nmemb;
    userData->append((char*)contents, totalSize);
    return totalSize;
}

// Function to make a POST request to the AI API
std::string sendToAI(const std::string& prompt) {
    CURL* curl;
    CURLcode res;
    std::string readBuffer;

    curl = curl_easy_init();
    if (curl) {
        // Set the API endpoint
        std::string apiUrl = "https://api.example.com/ai";
        curl_easy_setopt(curl, CURLOPT_URL, apiUrl.c_str());

        // Set the API key in the header
        struct curl_slist* headers = NULL;
        headers = curl_slist_append(headers, "Content-Type: application/json");
        headers = curl_slist_append(headers, "Authorization: Bearer YOUR_API_KEY_HERE");
        curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);

        // Create the JSON payload
        std::string jsonData = R"({"prompt": ")" + prompt + R"("})";

        // Set POST data
        curl_easy_setopt(curl, CURLOPT_POSTFIELDS, jsonData.c_str());

        // Set the callback function to handle the response
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteCallback);
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);

        // Perform the request
        res = curl_easy_perform(curl);

        // Check for errors
        if (res != CURLE_OK) {
            std::cerr << "cURL Error: " << curl_easy_strerror(res) << std::endl;
        }

        // Cleanup
        curl_easy_cleanup(curl);
        curl_slist_free_all(headers);
    }

    return readBuffer;
}

int main() {
    std::string prompt;
    std::cout << "Enter your prompt: ";
    std
